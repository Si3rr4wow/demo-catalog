import FileUpload from '@/components/file-upload';
import { Box, Center, HStack, Heading, Image, Spinner } from '@chakra-ui/react';
import Head from 'next/head';
import { useEffect, useState } from 'react';

export default function Home() {
  const [filePath, setFilePath] = useState<string>('');
  const [file, setFile] = useState<Blob | null>(null);
  const [fileSrc, setFileSrc] = useState<string | undefined>();
  const [fileBin, setFileBin] = useState<string | undefined>();
  const [predictions, setPredictions] = useState<
    { confidences: number[]; displayNames: string[] }[]
  >([]);
  const [predictionsLoading, setPredictionsLoading] = useState<boolean>(false);

  useEffect(() => {
    if (!file) return;
    const dataUrlReader = new FileReader();
    dataUrlReader.readAsDataURL(file);
    dataUrlReader.onloadend = () => {
      if (!dataUrlReader.result) throw new Error('something went wrong');
      setFileSrc(dataUrlReader.result as string);
    };

    const binReader = new FileReader();
    binReader.readAsBinaryString(file);
    binReader.onloadend = () => {
      if (!binReader.result) throw new Error('something went wrong');
      setFileBin(binReader.result as string);
    };
  }, [file]);

  useEffect(() => {
    if (!fileBin) return;
    if (!process.env.NEXT_PUBLIC_GCLOUD_API_URL)
      throw new Error('Missing NEXT_PUBLIC_GCLOUD_API_URL');
    setPredictions([]);
    setPredictionsLoading(true);
    fetch(process.env.NEXT_PUBLIC_GCLOUD_API_URL, {
      body: JSON.stringify({
        instances: [
          {
            content: btoa(fileBin),
          },
        ],
        parameters: {
          confidenceThreshold: 0.2,
          maxPredictions: 5,
        },
      }),
      method: 'POST',
      headers: {
        Authorization: `Bearer ${process.env.NEXT_PUBLIC_GCLOUD_ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      },
    })
      .then(
        (res) => res.json(),
        (err) => console.log(err)
      )
      .then(
        (res) => {
          res.predictions && setPredictions(res.predictions);
        },
        (err) => console.log(err)
      )
      .finally(() => {
        setPredictionsLoading(false);
      });
  }, [fileBin]);

  const onSelectImage = (event: any) => {
    setFile(event.target.files[0]);
    setFilePath(event.target.value);
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Heading>Add a new product</Heading>
        <FileUpload
          name="product-image"
          placeholder="Product image"
          label={'Upload an image'}
          value={filePath}
          onChange={onSelectImage}
        ></FileUpload>
        <Center>
          {fileSrc ? (
            <Image
              borderRadius={4}
              my={4}
              src={fileSrc as unknown as string}
              alt={'Your image'}
              maxH={400}
            ></Image>
          ) : null}
        </Center>
        {predictionsLoading && <Spinner />}
        {!!predictions.length && (
          <>
            <Heading size={'md'} my={4}>
              Possible Categories
            </Heading>
            <HStack spacing="24px">
              {predictions.map(({ displayNames }) =>
                displayNames.map((displayName) => (
                  <Box p={4} background={'blackAlpha.400'} key={displayName}>
                    {displayName.toLocaleUpperCase('en-GB')}
                  </Box>
                ))
              )}
            </HStack>
          </>
        )}
      </main>
    </>
  );
}
